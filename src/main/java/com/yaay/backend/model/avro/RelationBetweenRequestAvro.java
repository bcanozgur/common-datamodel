/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.yaay.backend.model.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class RelationBetweenRequestAvro extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4498509663535722296L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"RelationBetweenRequestAvro\",\"namespace\":\"com.yaay.backend.model.avro\",\"fields\":[{\"name\":\"user1Id\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"user2Id\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<RelationBetweenRequestAvro> ENCODER =
      new BinaryMessageEncoder<RelationBetweenRequestAvro>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<RelationBetweenRequestAvro> DECODER =
      new BinaryMessageDecoder<RelationBetweenRequestAvro>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<RelationBetweenRequestAvro> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<RelationBetweenRequestAvro> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<RelationBetweenRequestAvro> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<RelationBetweenRequestAvro>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this RelationBetweenRequestAvro to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a RelationBetweenRequestAvro from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a RelationBetweenRequestAvro instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static RelationBetweenRequestAvro fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String user1Id;
  private java.lang.String user2Id;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public RelationBetweenRequestAvro() {}

  /**
   * All-args constructor.
   * @param user1Id The new value for user1Id
   * @param user2Id The new value for user2Id
   */
  public RelationBetweenRequestAvro(java.lang.String user1Id, java.lang.String user2Id) {
    this.user1Id = user1Id;
    this.user2Id = user2Id;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return user1Id;
    case 1: return user2Id;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: user1Id = value$ != null ? value$.toString() : null; break;
    case 1: user2Id = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'user1Id' field.
   * @return The value of the 'user1Id' field.
   */
  public java.lang.String getUser1Id() {
    return user1Id;
  }


  /**
   * Sets the value of the 'user1Id' field.
   * @param value the value to set.
   */
  public void setUser1Id(java.lang.String value) {
    this.user1Id = value;
  }

  /**
   * Gets the value of the 'user2Id' field.
   * @return The value of the 'user2Id' field.
   */
  public java.lang.String getUser2Id() {
    return user2Id;
  }


  /**
   * Sets the value of the 'user2Id' field.
   * @param value the value to set.
   */
  public void setUser2Id(java.lang.String value) {
    this.user2Id = value;
  }

  /**
   * Creates a new RelationBetweenRequestAvro RecordBuilder.
   * @return A new RelationBetweenRequestAvro RecordBuilder
   */
  public static com.yaay.backend.model.avro.RelationBetweenRequestAvro.Builder newBuilder() {
    return new com.yaay.backend.model.avro.RelationBetweenRequestAvro.Builder();
  }

  /**
   * Creates a new RelationBetweenRequestAvro RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new RelationBetweenRequestAvro RecordBuilder
   */
  public static com.yaay.backend.model.avro.RelationBetweenRequestAvro.Builder newBuilder(com.yaay.backend.model.avro.RelationBetweenRequestAvro.Builder other) {
    if (other == null) {
      return new com.yaay.backend.model.avro.RelationBetweenRequestAvro.Builder();
    } else {
      return new com.yaay.backend.model.avro.RelationBetweenRequestAvro.Builder(other);
    }
  }

  /**
   * Creates a new RelationBetweenRequestAvro RecordBuilder by copying an existing RelationBetweenRequestAvro instance.
   * @param other The existing instance to copy.
   * @return A new RelationBetweenRequestAvro RecordBuilder
   */
  public static com.yaay.backend.model.avro.RelationBetweenRequestAvro.Builder newBuilder(com.yaay.backend.model.avro.RelationBetweenRequestAvro other) {
    if (other == null) {
      return new com.yaay.backend.model.avro.RelationBetweenRequestAvro.Builder();
    } else {
      return new com.yaay.backend.model.avro.RelationBetweenRequestAvro.Builder(other);
    }
  }

  /**
   * RecordBuilder for RelationBetweenRequestAvro instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<RelationBetweenRequestAvro>
    implements org.apache.avro.data.RecordBuilder<RelationBetweenRequestAvro> {

    private java.lang.String user1Id;
    private java.lang.String user2Id;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.yaay.backend.model.avro.RelationBetweenRequestAvro.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.user1Id)) {
        this.user1Id = data().deepCopy(fields()[0].schema(), other.user1Id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.user2Id)) {
        this.user2Id = data().deepCopy(fields()[1].schema(), other.user2Id);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
    }

    /**
     * Creates a Builder by copying an existing RelationBetweenRequestAvro instance
     * @param other The existing instance to copy.
     */
    private Builder(com.yaay.backend.model.avro.RelationBetweenRequestAvro other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.user1Id)) {
        this.user1Id = data().deepCopy(fields()[0].schema(), other.user1Id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.user2Id)) {
        this.user2Id = data().deepCopy(fields()[1].schema(), other.user2Id);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'user1Id' field.
      * @return The value.
      */
    public java.lang.String getUser1Id() {
      return user1Id;
    }


    /**
      * Sets the value of the 'user1Id' field.
      * @param value The value of 'user1Id'.
      * @return This builder.
      */
    public com.yaay.backend.model.avro.RelationBetweenRequestAvro.Builder setUser1Id(java.lang.String value) {
      validate(fields()[0], value);
      this.user1Id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'user1Id' field has been set.
      * @return True if the 'user1Id' field has been set, false otherwise.
      */
    public boolean hasUser1Id() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'user1Id' field.
      * @return This builder.
      */
    public com.yaay.backend.model.avro.RelationBetweenRequestAvro.Builder clearUser1Id() {
      user1Id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'user2Id' field.
      * @return The value.
      */
    public java.lang.String getUser2Id() {
      return user2Id;
    }


    /**
      * Sets the value of the 'user2Id' field.
      * @param value The value of 'user2Id'.
      * @return This builder.
      */
    public com.yaay.backend.model.avro.RelationBetweenRequestAvro.Builder setUser2Id(java.lang.String value) {
      validate(fields()[1], value);
      this.user2Id = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'user2Id' field has been set.
      * @return True if the 'user2Id' field has been set, false otherwise.
      */
    public boolean hasUser2Id() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'user2Id' field.
      * @return This builder.
      */
    public com.yaay.backend.model.avro.RelationBetweenRequestAvro.Builder clearUser2Id() {
      user2Id = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public RelationBetweenRequestAvro build() {
      try {
        RelationBetweenRequestAvro record = new RelationBetweenRequestAvro();
        record.user1Id = fieldSetFlags()[0] ? this.user1Id : (java.lang.String) defaultValue(fields()[0]);
        record.user2Id = fieldSetFlags()[1] ? this.user2Id : (java.lang.String) defaultValue(fields()[1]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<RelationBetweenRequestAvro>
    WRITER$ = (org.apache.avro.io.DatumWriter<RelationBetweenRequestAvro>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<RelationBetweenRequestAvro>
    READER$ = (org.apache.avro.io.DatumReader<RelationBetweenRequestAvro>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.user1Id == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.user1Id);
    }

    if (this.user2Id == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.user2Id);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.user1Id = null;
      } else {
        this.user1Id = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.user2Id = null;
      } else {
        this.user2Id = in.readString();
      }

    } else {
      for (int i = 0; i < 2; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.user1Id = null;
          } else {
            this.user1Id = in.readString();
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.user2Id = null;
          } else {
            this.user2Id = in.readString();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










